
postlab5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000310  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000029c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800100  00800100  00000310  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000340  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000380  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000885  00000000  00000000  000003d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006f9  00000000  00000000  00000c55  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003c0  00000000  00000000  0000134e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000094  00000000  00000000  00001710  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000042c  00000000  00000000  000017a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000005d  00000000  00000000  00001bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001c2d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 01 01 	jmp	0x202	; 0x202 <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	ac 30       	cpi	r26, 0x0C	; 12
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 95 00 	call	0x12a	; 0x12a <main>
  88:	0c 94 4c 01 	jmp	0x298	; 0x298 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <PWM_init>:

// NON-Interrupt subroutines
// Funciones de Seteo
void PWM_init()
{
	DDRB |= (1 << PINB1) | (1 << PINB2);  // D9 y D10 como salida
  90:	84 b1       	in	r24, 0x04	; 4
  92:	86 60       	ori	r24, 0x06	; 6
  94:	84 b9       	out	0x04, r24	; 4

	TCCR1A = (1 << COM1A1) | (1 << COM1B1) | (1 << WGM11);
  96:	82 ea       	ldi	r24, 0xA2	; 162
  98:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS11);    // Modo Fast PWM 14, TOP = ICR1 y prescaler = 8
  9c:	8a e1       	ldi	r24, 0x1A	; 26
  9e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>

	ICR1 = 20000;  // Setear Top como 20ms
  a2:	80 e2       	ldi	r24, 0x20	; 32
  a4:	9e e4       	ldi	r25, 0x4E	; 78
  a6:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
  aa:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
  ae:	08 95       	ret

000000b0 <ADC_init>:
}

void ADC_init()
{
	ADMUX = (1 << REFS0);  // 5V de referencia
  b0:	80 e4       	ldi	r24, 0x40	; 64
  b2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1);  // prescaler = 64
  b6:	86 e8       	ldi	r24, 0x86	; 134
  b8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  bc:	08 95       	ret

000000be <TMR0_init>:
}

void TMR0_init()
{
	DDRD |= 0xFF;		// Puerto D es salida
  be:	8a b1       	in	r24, 0x0a	; 10
  c0:	8f ef       	ldi	r24, 0xFF	; 255
  c2:	8a b9       	out	0x0a, r24	; 10
	PORTD |= 0x00;
  c4:	8b b1       	in	r24, 0x0b	; 11
  c6:	8b b9       	out	0x0b, r24	; 11
	
	CLKPR	= (1 << CLKPCE); // Habilitar cambio en el prescaler
  c8:	e1 e6       	ldi	r30, 0x61	; 97
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 e8       	ldi	r24, 0x80	; 128
  ce:	80 83       	st	Z, r24
	CLKPR	= (1 << CLKPS2); // Setea presc a 16 para 1Mhz
  d0:	84 e0       	ldi	r24, 0x04	; 4
  d2:	80 83       	st	Z, r24
	
	TCCR0B = (1 << CS02) | (1 << CS00); // Prescaler 1024
  d4:	85 e0       	ldi	r24, 0x05	; 5
  d6:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = (1 << TOIE0);
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	TCNT0 = 158;
  de:	8e e9       	ldi	r24, 0x9E	; 158
  e0:	86 bd       	out	0x26, r24	; 38
  e2:	08 95       	ret

000000e4 <LED_ON>:
}

void LED_ON()
{
	if (momento < LED_TMR)
  e4:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  e8:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <LED_TMR>
  ec:	98 17       	cp	r25, r24
  ee:	20 f4       	brcc	.+8      	; 0xf8 <LED_ON+0x14>
	{
		PORTD |= (1 << PORTD2);  // Encender LED
  f0:	8b b1       	in	r24, 0x0b	; 11
  f2:	84 60       	ori	r24, 0x04	; 4
  f4:	8b b9       	out	0x0b, r24	; 11
  f6:	08 95       	ret
	}
	else
	{
		PORTD &= ~(1 << PORTD2); // Apagar LED
  f8:	8b b1       	in	r24, 0x0b	; 11
  fa:	8b 7f       	andi	r24, 0xFB	; 251
  fc:	8b b9       	out	0x0b, r24	; 11
  fe:	08 95       	ret

00000100 <ADC_read>:
	}
}

uint16_t ADC_read(uint8_t PIN)
{
	ADMUX = (ADMUX & 0xF0) | (PIN & 0x0F);   // Selecciona canal (0–7)
 100:	ec e7       	ldi	r30, 0x7C	; 124
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	90 81       	ld	r25, Z
 106:	90 7f       	andi	r25, 0xF0	; 240
 108:	8f 70       	andi	r24, 0x0F	; 15
 10a:	89 2b       	or	r24, r25
 10c:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);                   // Inicia conversión
 10e:	ea e7       	ldi	r30, 0x7A	; 122
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	80 64       	ori	r24, 0x40	; 64
 116:	80 83       	st	Z, r24
	while (ADCSRA & (1 << ADSC));            // Espera a que termine
 118:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 11c:	86 fd       	sbrc	r24, 6
 11e:	fc cf       	rjmp	.-8      	; 0x118 <ADC_read+0x18>
	return ADC;                              // Devuelve valor (10 bits)
 120:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 124:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
 128:	08 95       	ret

0000012a <main>:
uint8_t momento = 0;

// MAIN LOOP
int main(void)
{
	TMR0_init();
 12a:	0e 94 5f 00 	call	0xbe	; 0xbe <TMR0_init>
	PWM_init();
 12e:	0e 94 48 00 	call	0x90	; 0x90 <PWM_init>
	ADC_init();
 132:	0e 94 58 00 	call	0xb0	; 0xb0 <ADC_init>

	while (1)
	{
		ADC_servo1 = ADC_read(6);
 136:	86 e0       	ldi	r24, 0x06	; 6
 138:	0e 94 80 00 	call	0x100	; 0x100 <ADC_read>
 13c:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <ADC_servo1+0x1>
 140:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <ADC_servo1>
		ADC_servo2 = ADC_read(7);
 144:	87 e0       	ldi	r24, 0x07	; 7
 146:	0e 94 80 00 	call	0x100	; 0x100 <ADC_read>
 14a:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <ADC_servo2+0x1>
 14e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <ADC_servo2>
		ADC_led = ADC_read(5);
 152:	85 e0       	ldi	r24, 0x05	; 5
 154:	0e 94 80 00 	call	0x100	; 0x100 <ADC_read>
 158:	8c 01       	movw	r16, r24
 15a:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <ADC_led+0x1>
 15e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <ADC_led>

		PWM_1 = (ADC_servo1 * 4000UL) / 1023 + 1000;
 162:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <ADC_servo1>
 166:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <ADC_servo1+0x1>
 16a:	a0 ea       	ldi	r26, 0xA0	; 160
 16c:	bf e0       	ldi	r27, 0x0F	; 15
 16e:	0e 94 3d 01 	call	0x27a	; 0x27a <__umulhisi3>
 172:	0f 2e       	mov	r0, r31
 174:	cc 24       	eor	r12, r12
 176:	ca 94       	dec	r12
 178:	f3 e0       	ldi	r31, 0x03	; 3
 17a:	df 2e       	mov	r13, r31
 17c:	e1 2c       	mov	r14, r1
 17e:	f1 2c       	mov	r15, r1
 180:	f0 2d       	mov	r31, r0
 182:	a7 01       	movw	r20, r14
 184:	96 01       	movw	r18, r12
 186:	0e 94 1b 01 	call	0x236	; 0x236 <__udivmodsi4>
 18a:	e9 01       	movw	r28, r18
 18c:	c8 51       	subi	r28, 0x18	; 24
 18e:	dc 4f       	sbci	r29, 0xFC	; 252
 190:	d0 93 05 01 	sts	0x0105, r29	; 0x800105 <PWM_1+0x1>
 194:	c0 93 04 01 	sts	0x0104, r28	; 0x800104 <PWM_1>
		PWM_2 = (ADC_servo2 * 4000UL) / 1023 + 1000;
 198:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <ADC_servo2>
 19c:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <ADC_servo2+0x1>
 1a0:	a0 ea       	ldi	r26, 0xA0	; 160
 1a2:	bf e0       	ldi	r27, 0x0F	; 15
 1a4:	0e 94 3d 01 	call	0x27a	; 0x27a <__umulhisi3>
 1a8:	a7 01       	movw	r20, r14
 1aa:	96 01       	movw	r18, r12
 1ac:	0e 94 1b 01 	call	0x236	; 0x236 <__udivmodsi4>
 1b0:	28 51       	subi	r18, 0x18	; 24
 1b2:	3c 4f       	sbci	r19, 0xFC	; 252
 1b4:	30 93 03 01 	sts	0x0103, r19	; 0x800103 <PWM_2+0x1>
 1b8:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <PWM_2>
		LED_TMR = (ADC_led * 50UL) / 1023;
 1bc:	98 01       	movw	r18, r16
 1be:	a2 e3       	ldi	r26, 0x32	; 50
 1c0:	b0 e0       	ldi	r27, 0x00	; 0
 1c2:	0e 94 3d 01 	call	0x27a	; 0x27a <__umulhisi3>
 1c6:	a7 01       	movw	r20, r14
 1c8:	96 01       	movw	r18, r12
 1ca:	0e 94 1b 01 	call	0x236	; 0x236 <__udivmodsi4>
 1ce:	20 93 01 01 	sts	0x0101, r18	; 0x800101 <LED_TMR>
		
		OCR1A = PWM_1;
 1d2:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 1d6:	c0 93 88 00 	sts	0x0088, r28	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		OCR1B = PWM_2;
 1da:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <PWM_2>
 1de:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <PWM_2+0x1>
 1e2:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 1e6:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
		
		LED_ON();
 1ea:	0e 94 72 00 	call	0xe4	; 0xe4 <LED_ON>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ee:	2f ef       	ldi	r18, 0xFF	; 255
 1f0:	89 ef       	ldi	r24, 0xF9	; 249
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	21 50       	subi	r18, 0x01	; 1
 1f6:	80 40       	sbci	r24, 0x00	; 0
 1f8:	90 40       	sbci	r25, 0x00	; 0
 1fa:	e1 f7       	brne	.-8      	; 0x1f4 <main+0xca>
 1fc:	00 c0       	rjmp	.+0      	; 0x1fe <main+0xd4>
 1fe:	00 00       	nop
 200:	9a cf       	rjmp	.-204    	; 0x136 <main+0xc>

00000202 <__vector_16>:
}

// Interrupt routines

ISR(TIMER0_OVF_vect)
{
 202:	1f 92       	push	r1
 204:	0f 92       	push	r0
 206:	0f b6       	in	r0, 0x3f	; 63
 208:	0f 92       	push	r0
 20a:	11 24       	eor	r1, r1
 20c:	8f 93       	push	r24
	cli();
 20e:	f8 94       	cli
	
	momento++;
 210:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 214:	8f 5f       	subi	r24, 0xFF	; 255
 216:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	if (momento == 255)
 21a:	8f 3f       	cpi	r24, 0xFF	; 255
 21c:	11 f4       	brne	.+4      	; 0x222 <__vector_16+0x20>
	{
		momento = 0;  // Encender LED
 21e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	
	TCNT0 = LED_TMR;  // Precarga el timer
 222:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <LED_TMR>
 226:	86 bd       	out	0x26, r24	; 38
	
	sei();
 228:	78 94       	sei
 22a:	8f 91       	pop	r24
 22c:	0f 90       	pop	r0
 22e:	0f be       	out	0x3f, r0	; 63
 230:	0f 90       	pop	r0
 232:	1f 90       	pop	r1
 234:	18 95       	reti

00000236 <__udivmodsi4>:
 236:	a1 e2       	ldi	r26, 0x21	; 33
 238:	1a 2e       	mov	r1, r26
 23a:	aa 1b       	sub	r26, r26
 23c:	bb 1b       	sub	r27, r27
 23e:	fd 01       	movw	r30, r26
 240:	0d c0       	rjmp	.+26     	; 0x25c <__udivmodsi4_ep>

00000242 <__udivmodsi4_loop>:
 242:	aa 1f       	adc	r26, r26
 244:	bb 1f       	adc	r27, r27
 246:	ee 1f       	adc	r30, r30
 248:	ff 1f       	adc	r31, r31
 24a:	a2 17       	cp	r26, r18
 24c:	b3 07       	cpc	r27, r19
 24e:	e4 07       	cpc	r30, r20
 250:	f5 07       	cpc	r31, r21
 252:	20 f0       	brcs	.+8      	; 0x25c <__udivmodsi4_ep>
 254:	a2 1b       	sub	r26, r18
 256:	b3 0b       	sbc	r27, r19
 258:	e4 0b       	sbc	r30, r20
 25a:	f5 0b       	sbc	r31, r21

0000025c <__udivmodsi4_ep>:
 25c:	66 1f       	adc	r22, r22
 25e:	77 1f       	adc	r23, r23
 260:	88 1f       	adc	r24, r24
 262:	99 1f       	adc	r25, r25
 264:	1a 94       	dec	r1
 266:	69 f7       	brne	.-38     	; 0x242 <__udivmodsi4_loop>
 268:	60 95       	com	r22
 26a:	70 95       	com	r23
 26c:	80 95       	com	r24
 26e:	90 95       	com	r25
 270:	9b 01       	movw	r18, r22
 272:	ac 01       	movw	r20, r24
 274:	bd 01       	movw	r22, r26
 276:	cf 01       	movw	r24, r30
 278:	08 95       	ret

0000027a <__umulhisi3>:
 27a:	a2 9f       	mul	r26, r18
 27c:	b0 01       	movw	r22, r0
 27e:	b3 9f       	mul	r27, r19
 280:	c0 01       	movw	r24, r0
 282:	a3 9f       	mul	r26, r19
 284:	70 0d       	add	r23, r0
 286:	81 1d       	adc	r24, r1
 288:	11 24       	eor	r1, r1
 28a:	91 1d       	adc	r25, r1
 28c:	b2 9f       	mul	r27, r18
 28e:	70 0d       	add	r23, r0
 290:	81 1d       	adc	r24, r1
 292:	11 24       	eor	r1, r1
 294:	91 1d       	adc	r25, r1
 296:	08 95       	ret

00000298 <_exit>:
 298:	f8 94       	cli

0000029a <__stop_program>:
 29a:	ff cf       	rjmp	.-2      	; 0x29a <__stop_program>
