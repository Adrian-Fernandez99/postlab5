
postlab5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000002ae  00000342  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800102  00800102  00000344  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000374  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  000003b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000875  00000000  00000000  000003fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000704  00000000  00000000  00000c71  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003af  00000000  00000000  00001375  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000088  00000000  00000000  00001724  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000042d  00000000  00000000  000017ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000006a  00000000  00000000  00001bd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001c43  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ea       	ldi	r30, 0xAE	; 174
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 30       	cpi	r26, 0x0E	; 14
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 93 00 	call	0x126	; 0x126 <main>
  9e:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <PWM_init>:

// NON-Interrupt subroutines
// Funciones de Seteo
void PWM_init()
{
	DDRB |= (1 << PINB1) | (1 << PINB2);  // D9 y D10 como salida
  a6:	84 b1       	in	r24, 0x04	; 4
  a8:	86 60       	ori	r24, 0x06	; 6
  aa:	84 b9       	out	0x04, r24	; 4

	TCCR1A = (1 << COM1A1) | (1 << COM1B1) | (1 << WGM11);
  ac:	82 ea       	ldi	r24, 0xA2	; 162
  ae:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS11);    // Modo Fast PWM 14, TOP = ICR1 y prescaler = 8
  b2:	8a e1       	ldi	r24, 0x1A	; 26
  b4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>

	ICR1 = 20000;  // Setear Top como 20ms
  b8:	80 e2       	ldi	r24, 0x20	; 32
  ba:	9e e4       	ldi	r25, 0x4E	; 78
  bc:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
  c0:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
  c4:	08 95       	ret

000000c6 <ADC_init>:
}

void ADC_init()
{
	ADMUX = (1 << REFS0);  // 5V de referencia
  c6:	80 e4       	ldi	r24, 0x40	; 64
  c8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1);  // prescaler = 64
  cc:	86 e8       	ldi	r24, 0x86	; 134
  ce:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  d2:	08 95       	ret

000000d4 <TMR0_init>:
}

void TMR0_init()
{
	DDRD |= 0xFF;		// Puerto D es salida
  d4:	8a b1       	in	r24, 0x0a	; 10
  d6:	8f ef       	ldi	r24, 0xFF	; 255
  d8:	8a b9       	out	0x0a, r24	; 10
	PORTD |= 0x00;
  da:	8b b1       	in	r24, 0x0b	; 11
  dc:	8b b9       	out	0x0b, r24	; 11
	
	CLKPR	= (1 << CLKPCE); // Habilitar cambio en el prescaler
  de:	e1 e6       	ldi	r30, 0x61	; 97
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 e8       	ldi	r24, 0x80	; 128
  e4:	80 83       	st	Z, r24
	CLKPR	= (1 << CLKPS2); // Setea presc a 16 para 1Mhz
  e6:	84 e0       	ldi	r24, 0x04	; 4
  e8:	80 83       	st	Z, r24
	
	TCCR0B = (1 << CS01) | (1 << CS00); // Prescaler 1024
  ea:	83 e0       	ldi	r24, 0x03	; 3
  ec:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = (1 << TOIE0);
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	TCNT0 = TMR_val;
  f4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  f8:	86 bd       	out	0x26, r24	; 38
  fa:	08 95       	ret

000000fc <ADC_read>:
}

uint16_t ADC_read(uint8_t PIN)
{
	ADMUX = (ADMUX & 0xF0) | (PIN & 0x0F);   // Selecciona canal (0–7)
  fc:	ec e7       	ldi	r30, 0x7C	; 124
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	90 81       	ld	r25, Z
 102:	90 7f       	andi	r25, 0xF0	; 240
 104:	8f 70       	andi	r24, 0x0F	; 15
 106:	89 2b       	or	r24, r25
 108:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);                   // Inicia conversión
 10a:	ea e7       	ldi	r30, 0x7A	; 122
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	80 81       	ld	r24, Z
 110:	80 64       	ori	r24, 0x40	; 64
 112:	80 83       	st	Z, r24
	while (ADCSRA & (1 << ADSC));            // Espera a que termine
 114:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 118:	86 fd       	sbrc	r24, 6
 11a:	fc cf       	rjmp	.-8      	; 0x114 <ADC_read+0x18>
	return ADC;                              // Devuelve valor (10 bits)
 11c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 120:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
 124:	08 95       	ret

00000126 <main>:
uint8_t TMR_val = 254;

// MAIN LOOP
int main(void)
{
	TMR0_init();
 126:	0e 94 6a 00 	call	0xd4	; 0xd4 <TMR0_init>
	PWM_init();
 12a:	0e 94 53 00 	call	0xa6	; 0xa6 <PWM_init>
	ADC_init();
 12e:	0e 94 63 00 	call	0xc6	; 0xc6 <ADC_init>

	while (1)
	{
		sei();
 132:	78 94       	sei
		ADC_servo1 = ADC_read(6);
 134:	86 e0       	ldi	r24, 0x06	; 6
 136:	0e 94 7e 00 	call	0xfc	; 0xfc <ADC_read>
 13a:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <ADC_servo1+0x1>
 13e:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <ADC_servo1>
		ADC_servo2 = ADC_read(7);
 142:	87 e0       	ldi	r24, 0x07	; 7
 144:	0e 94 7e 00 	call	0xfc	; 0xfc <ADC_read>
 148:	8c 01       	movw	r16, r24
 14a:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <ADC_servo2+0x1>
 14e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <ADC_servo2>

		PWM_1 = (ADC_servo1 * 4000UL) / 1023 + 1000;
 152:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <ADC_servo1>
 156:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <ADC_servo1+0x1>
 15a:	a0 ea       	ldi	r26, 0xA0	; 160
 15c:	bf e0       	ldi	r27, 0x0F	; 15
 15e:	0e 94 46 01 	call	0x28c	; 0x28c <__umulhisi3>
 162:	0f 2e       	mov	r0, r31
 164:	cc 24       	eor	r12, r12
 166:	ca 94       	dec	r12
 168:	f3 e0       	ldi	r31, 0x03	; 3
 16a:	df 2e       	mov	r13, r31
 16c:	e1 2c       	mov	r14, r1
 16e:	f1 2c       	mov	r15, r1
 170:	f0 2d       	mov	r31, r0
 172:	a7 01       	movw	r20, r14
 174:	96 01       	movw	r18, r12
 176:	0e 94 24 01 	call	0x248	; 0x248 <__udivmodsi4>
 17a:	e9 01       	movw	r28, r18
 17c:	c8 51       	subi	r28, 0x18	; 24
 17e:	dc 4f       	sbci	r29, 0xFC	; 252
 180:	d0 93 07 01 	sts	0x0107, r29	; 0x800107 <PWM_1+0x1>
 184:	c0 93 06 01 	sts	0x0106, r28	; 0x800106 <PWM_1>
		PWM_2 = (ADC_servo2 * 4000UL) / 1023 + 1000;
 188:	98 01       	movw	r18, r16
 18a:	a0 ea       	ldi	r26, 0xA0	; 160
 18c:	bf e0       	ldi	r27, 0x0F	; 15
 18e:	0e 94 46 01 	call	0x28c	; 0x28c <__umulhisi3>
 192:	a7 01       	movw	r20, r14
 194:	96 01       	movw	r18, r12
 196:	0e 94 24 01 	call	0x248	; 0x248 <__udivmodsi4>
 19a:	28 51       	subi	r18, 0x18	; 24
 19c:	3c 4f       	sbci	r19, 0xFC	; 252
 19e:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <PWM_2+0x1>
 1a2:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <PWM_2>
		
		OCR1A = PWM_1;
 1a6:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 1aa:	c0 93 88 00 	sts	0x0088, r28	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		OCR1B = PWM_2;
 1ae:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <PWM_2>
 1b2:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <PWM_2+0x1>
 1b6:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 1ba:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
		
		ADC_led = ADC_read(5);
 1be:	85 e0       	ldi	r24, 0x05	; 5
 1c0:	0e 94 7e 00 	call	0xfc	; 0xfc <ADC_read>
 1c4:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <ADC_led+0x1>
 1c8:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <ADC_led>
		LED_TMR = (ADC_led * 254UL) / 1023;
 1cc:	9c 01       	movw	r18, r24
 1ce:	ae ef       	ldi	r26, 0xFE	; 254
 1d0:	b0 e0       	ldi	r27, 0x00	; 0
 1d2:	0e 94 46 01 	call	0x28c	; 0x28c <__umulhisi3>
 1d6:	a7 01       	movw	r20, r14
 1d8:	96 01       	movw	r18, r12
 1da:	0e 94 24 01 	call	0x248	; 0x248 <__udivmodsi4>
 1de:	20 93 03 01 	sts	0x0103, r18	; 0x800103 <LED_TMR>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e2:	2f ef       	ldi	r18, 0xFF	; 255
 1e4:	89 ef       	ldi	r24, 0xF9	; 249
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	21 50       	subi	r18, 0x01	; 1
 1ea:	80 40       	sbci	r24, 0x00	; 0
 1ec:	90 40       	sbci	r25, 0x00	; 0
 1ee:	e1 f7       	brne	.-8      	; 0x1e8 <main+0xc2>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <main+0xcc>
 1f2:	00 00       	nop
 1f4:	9e cf       	rjmp	.-196    	; 0x132 <main+0xc>

000001f6 <__vector_16>:
}

// Interrupt routines

ISR(TIMER0_OVF_vect)
{
 1f6:	1f 92       	push	r1
 1f8:	0f 92       	push	r0
 1fa:	0f b6       	in	r0, 0x3f	; 63
 1fc:	0f 92       	push	r0
 1fe:	11 24       	eor	r1, r1
 200:	8f 93       	push	r24
 202:	9f 93       	push	r25
	cli();
 204:	f8 94       	cli
	
	momento++;
 206:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 20a:	8f 5f       	subi	r24, 0xFF	; 255
 20c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
	if (momento == 255)
 210:	8f 3f       	cpi	r24, 0xFF	; 255
 212:	11 f4       	brne	.+4      	; 0x218 <__vector_16+0x22>
	{
		momento = 0;  // Encender LED
 214:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
	}
	
	if (momento < LED_TMR)
 218:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <__data_end>
 21c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <LED_TMR>
 220:	98 17       	cp	r25, r24
 222:	20 f4       	brcc	.+8      	; 0x22c <__vector_16+0x36>
	{
		PORTD |= (1 << PORTD2);  // Encender LED
 224:	8b b1       	in	r24, 0x0b	; 11
 226:	84 60       	ori	r24, 0x04	; 4
 228:	8b b9       	out	0x0b, r24	; 11
 22a:	03 c0       	rjmp	.+6      	; 0x232 <__vector_16+0x3c>
	}
	else
	{
		PORTD &= ~(1 << PORTD2); // Apagar LED
 22c:	8b b1       	in	r24, 0x0b	; 11
 22e:	8b 7f       	andi	r24, 0xFB	; 251
 230:	8b b9       	out	0x0b, r24	; 11
	}
	
	TCNT0 = TMR_val;  // Precarga el timer
 232:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 236:	86 bd       	out	0x26, r24	; 38
	
	sei();
 238:	78 94       	sei
 23a:	9f 91       	pop	r25
 23c:	8f 91       	pop	r24
 23e:	0f 90       	pop	r0
 240:	0f be       	out	0x3f, r0	; 63
 242:	0f 90       	pop	r0
 244:	1f 90       	pop	r1
 246:	18 95       	reti

00000248 <__udivmodsi4>:
 248:	a1 e2       	ldi	r26, 0x21	; 33
 24a:	1a 2e       	mov	r1, r26
 24c:	aa 1b       	sub	r26, r26
 24e:	bb 1b       	sub	r27, r27
 250:	fd 01       	movw	r30, r26
 252:	0d c0       	rjmp	.+26     	; 0x26e <__udivmodsi4_ep>

00000254 <__udivmodsi4_loop>:
 254:	aa 1f       	adc	r26, r26
 256:	bb 1f       	adc	r27, r27
 258:	ee 1f       	adc	r30, r30
 25a:	ff 1f       	adc	r31, r31
 25c:	a2 17       	cp	r26, r18
 25e:	b3 07       	cpc	r27, r19
 260:	e4 07       	cpc	r30, r20
 262:	f5 07       	cpc	r31, r21
 264:	20 f0       	brcs	.+8      	; 0x26e <__udivmodsi4_ep>
 266:	a2 1b       	sub	r26, r18
 268:	b3 0b       	sbc	r27, r19
 26a:	e4 0b       	sbc	r30, r20
 26c:	f5 0b       	sbc	r31, r21

0000026e <__udivmodsi4_ep>:
 26e:	66 1f       	adc	r22, r22
 270:	77 1f       	adc	r23, r23
 272:	88 1f       	adc	r24, r24
 274:	99 1f       	adc	r25, r25
 276:	1a 94       	dec	r1
 278:	69 f7       	brne	.-38     	; 0x254 <__udivmodsi4_loop>
 27a:	60 95       	com	r22
 27c:	70 95       	com	r23
 27e:	80 95       	com	r24
 280:	90 95       	com	r25
 282:	9b 01       	movw	r18, r22
 284:	ac 01       	movw	r20, r24
 286:	bd 01       	movw	r22, r26
 288:	cf 01       	movw	r24, r30
 28a:	08 95       	ret

0000028c <__umulhisi3>:
 28c:	a2 9f       	mul	r26, r18
 28e:	b0 01       	movw	r22, r0
 290:	b3 9f       	mul	r27, r19
 292:	c0 01       	movw	r24, r0
 294:	a3 9f       	mul	r26, r19
 296:	70 0d       	add	r23, r0
 298:	81 1d       	adc	r24, r1
 29a:	11 24       	eor	r1, r1
 29c:	91 1d       	adc	r25, r1
 29e:	b2 9f       	mul	r27, r18
 2a0:	70 0d       	add	r23, r0
 2a2:	81 1d       	adc	r24, r1
 2a4:	11 24       	eor	r1, r1
 2a6:	91 1d       	adc	r25, r1
 2a8:	08 95       	ret

000002aa <_exit>:
 2aa:	f8 94       	cli

000002ac <__stop_program>:
 2ac:	ff cf       	rjmp	.-2      	; 0x2ac <__stop_program>
