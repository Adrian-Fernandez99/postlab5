
postlab5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000028a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800100  00800100  000002fe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002fe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000330  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000370  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000957  00000000  00000000  000003d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000790  00000000  00000000  00000d2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000496  00000000  00000000  000014bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b4  00000000  00000000  00001958  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000458  00000000  00000000  00001a0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000c2  00000000  00000000  00001e64  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001f26  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 c8 00 	jmp	0x190	; 0x190 <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	ab 30       	cpi	r26, 0x0B	; 11
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 83 00 	call	0x106	; 0x106 <main>
  88:	0c 94 43 01 	jmp	0x286	; 0x286 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <PWM_init>:

// NON-Interrupt subroutines
// Funciones de Seteo
void PWM_init()
{
	DDRB |= (1 << PINB1) | (1 << PINB2);  // D9 y D10 como salida
  90:	84 b1       	in	r24, 0x04	; 4
  92:	86 60       	ori	r24, 0x06	; 6
  94:	84 b9       	out	0x04, r24	; 4

	TCCR1A = (1 << COM1A1) | (1 << COM1B1) | (1 << WGM11);
  96:	82 ea       	ldi	r24, 0xA2	; 162
  98:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS11);  // Modo Fast PWM 14, TOP = ICR1 y prescaler = 8
  9c:	8a e1       	ldi	r24, 0x1A	; 26
  9e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>

	ICR1 = 20000;  // Setear Top como 20ms
  a2:	80 e2       	ldi	r24, 0x20	; 32
  a4:	9e e4       	ldi	r25, 0x4E	; 78
  a6:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
  aa:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
  ae:	08 95       	ret

000000b0 <ADC_init>:
}

void ADC_init()
{
	ADMUX = (1 << REFS0);  // 5V de referencia
  b0:	80 e4       	ldi	r24, 0x40	; 64
  b2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1);  // prescaler = 64
  b6:	86 e8       	ldi	r24, 0x86	; 134
  b8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  bc:	08 95       	ret

000000be <TMR0_init>:
}

void TMR0_init()
{
	CLKPR	= (1 << CLKPCE); // Habilitar cambio en el prescaler
  be:	e1 e6       	ldi	r30, 0x61	; 97
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 e8       	ldi	r24, 0x80	; 128
  c4:	80 83       	st	Z, r24
	CLKPR	= (1 << CLKPS2); // Setea presc a 16 para 1Mhz
  c6:	84 e0       	ldi	r24, 0x04	; 4
  c8:	80 83       	st	Z, r24
	
	TCCR0B = (1 << CS01) | (1 << CS00); // Prescaler 1024
  ca:	83 e0       	ldi	r24, 0x03	; 3
  cc:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = (1 << TOIE0);
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	TCNT0 = valor_timer0;
  d4:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <valor_timer0>
  d8:	86 bd       	out	0x26, r24	; 38
  da:	08 95       	ret

000000dc <ADC_read>:
}

uint16_t ADC_read(uint8_t PIN)
{
	ADMUX = (ADMUX & 0xF0) | (PIN & 0x0F);	// Selecciona pin de lectura
  dc:	ec e7       	ldi	r30, 0x7C	; 124
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	90 81       	ld	r25, Z
  e2:	90 7f       	andi	r25, 0xF0	; 240
  e4:	8f 70       	andi	r24, 0x0F	; 15
  e6:	89 2b       	or	r24, r25
  e8:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);                   // Inicia lectura en ADC
  ea:	ea e7       	ldi	r30, 0x7A	; 122
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	80 64       	ori	r24, 0x40	; 64
  f2:	80 83       	st	Z, r24
	while (ADCSRA & (1 << ADSC));            // Siempre que lea
  f4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  f8:	86 fd       	sbrc	r24, 6
  fa:	fc cf       	rjmp	.-8      	; 0xf4 <ADC_read+0x18>
	return ADC;                              // Devuelver valor
  fc:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 100:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
 104:	08 95       	ret

00000106 <main>:
void TMR0_init();
uint16_t ADC_read(uint8_t PIN);

int main(void)
{
	PWM_init();
 106:	0e 94 48 00 	call	0x90	; 0x90 <PWM_init>
	ADC_init();
 10a:	0e 94 58 00 	call	0xb0	; 0xb0 <ADC_init>
	TMR0_init();
 10e:	0e 94 5f 00 	call	0xbe	; 0xbe <TMR0_init>

	while (1)
	{
		ADC_servo1 = ADC_read(6);
 112:	86 e0       	ldi	r24, 0x06	; 6
 114:	0e 94 6e 00 	call	0xdc	; 0xdc <ADC_read>
 118:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <ADC_servo1+0x1>
 11c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <ADC_servo1>
		ADC_servo2 = ADC_read(7);
 120:	87 e0       	ldi	r24, 0x07	; 7
 122:	0e 94 6e 00 	call	0xdc	; 0xdc <ADC_read>
 126:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <ADC_servo2+0x1>
 12a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <ADC_servo2>
		ADC_led = ADC_read(5);
 12e:	85 e0       	ldi	r24, 0x05	; 5
 130:	0e 94 6e 00 	call	0xdc	; 0xdc <ADC_read>
 134:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <ADC_led+0x1>
 138:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <ADC_led>
		
		map_servo(ADC_servo1, &PWM_1);
 13c:	62 e0       	ldi	r22, 0x02	; 2
 13e:	71 e0       	ldi	r23, 0x01	; 1
 140:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <ADC_servo1>
 144:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <ADC_servo1+0x1>
 148:	0e 94 de 00 	call	0x1bc	; 0x1bc <map_servo>
		map_servo(ADC_servo2, &PWM_2);
 14c:	60 e0       	ldi	r22, 0x00	; 0
 14e:	71 e0       	ldi	r23, 0x01	; 1
 150:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <ADC_servo2>
 154:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <ADC_servo2+0x1>
 158:	0e 94 de 00 	call	0x1bc	; 0x1bc <map_servo>
		//map_led(ADC_led, PWM_LED_V, );
		
		OCR1A = PWM_1;
 15c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <PWM_1>
 160:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <PWM_1+0x1>
 164:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 168:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		OCR1B = PWM_2;
 16c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 170:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 174:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 178:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 17c:	2f ef       	ldi	r18, 0xFF	; 255
 17e:	89 ef       	ldi	r24, 0xF9	; 249
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	21 50       	subi	r18, 0x01	; 1
 184:	80 40       	sbci	r24, 0x00	; 0
 186:	90 40       	sbci	r25, 0x00	; 0
 188:	e1 f7       	brne	.-8      	; 0x182 <main+0x7c>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <main+0x86>
 18c:	00 00       	nop
 18e:	c1 cf       	rjmp	.-126    	; 0x112 <main+0xc>

00000190 <__vector_16>:
}

// Interrupt routines

ISR(TIMER0_OVF_vect)
{
 190:	1f 92       	push	r1
 192:	0f 92       	push	r0
 194:	0f b6       	in	r0, 0x3f	; 63
 196:	0f 92       	push	r0
 198:	11 24       	eor	r1, r1
 19a:	8f 93       	push	r24
	cli();
 19c:	f8 94       	cli
	
	TCCR0B = (1 << CS01) | (1 << CS00); // Prescaler 1024
 19e:	83 e0       	ldi	r24, 0x03	; 3
 1a0:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = (1 << TOIE0);
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	TCNT0 = valor_timer0;
 1a8:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <valor_timer0>
 1ac:	86 bd       	out	0x26, r24	; 38
	
	sei();
 1ae:	78 94       	sei
 1b0:	8f 91       	pop	r24
 1b2:	0f 90       	pop	r0
 1b4:	0f be       	out	0x3f, r0	; 63
 1b6:	0f 90       	pop	r0
 1b8:	1f 90       	pop	r1
 1ba:	18 95       	reti

000001bc <map_servo>:
 */ 

#include "Servo1.h"

void map_servo(uint16_t ADC_var, uint16_t *PWM_var)
{
 1bc:	cf 93       	push	r28
 1be:	df 93       	push	r29
 1c0:	eb 01       	movw	r28, r22
	*PWM_var = (ADC_var * 40000) / 1023 + 1000;
 1c2:	9c 01       	movw	r18, r24
 1c4:	a0 e4       	ldi	r26, 0x40	; 64
 1c6:	bc e9       	ldi	r27, 0x9C	; 156
 1c8:	0e 94 12 01 	call	0x224	; 0x224 <__umulhisi3>
 1cc:	2f ef       	ldi	r18, 0xFF	; 255
 1ce:	33 e0       	ldi	r19, 0x03	; 3
 1d0:	40 e0       	ldi	r20, 0x00	; 0
 1d2:	50 e0       	ldi	r21, 0x00	; 0
 1d4:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <__divmodsi4>
 1d8:	28 51       	subi	r18, 0x18	; 24
 1da:	3c 4f       	sbci	r19, 0xFC	; 252
 1dc:	39 83       	std	Y+1, r19	; 0x01
 1de:	28 83       	st	Y, r18
	
 1e0:	df 91       	pop	r29
 1e2:	cf 91       	pop	r28
 1e4:	08 95       	ret

000001e6 <__divmodsi4>:
 1e6:	05 2e       	mov	r0, r21
 1e8:	97 fb       	bst	r25, 7
 1ea:	1e f4       	brtc	.+6      	; 0x1f2 <__divmodsi4+0xc>
 1ec:	00 94       	com	r0
 1ee:	0e 94 0a 01 	call	0x214	; 0x214 <__negsi2>
 1f2:	57 fd       	sbrc	r21, 7
 1f4:	07 d0       	rcall	.+14     	; 0x204 <__divmodsi4_neg2>
 1f6:	0e 94 21 01 	call	0x242	; 0x242 <__udivmodsi4>
 1fa:	07 fc       	sbrc	r0, 7
 1fc:	03 d0       	rcall	.+6      	; 0x204 <__divmodsi4_neg2>
 1fe:	4e f4       	brtc	.+18     	; 0x212 <__divmodsi4_exit>
 200:	0c 94 0a 01 	jmp	0x214	; 0x214 <__negsi2>

00000204 <__divmodsi4_neg2>:
 204:	50 95       	com	r21
 206:	40 95       	com	r20
 208:	30 95       	com	r19
 20a:	21 95       	neg	r18
 20c:	3f 4f       	sbci	r19, 0xFF	; 255
 20e:	4f 4f       	sbci	r20, 0xFF	; 255
 210:	5f 4f       	sbci	r21, 0xFF	; 255

00000212 <__divmodsi4_exit>:
 212:	08 95       	ret

00000214 <__negsi2>:
 214:	90 95       	com	r25
 216:	80 95       	com	r24
 218:	70 95       	com	r23
 21a:	61 95       	neg	r22
 21c:	7f 4f       	sbci	r23, 0xFF	; 255
 21e:	8f 4f       	sbci	r24, 0xFF	; 255
 220:	9f 4f       	sbci	r25, 0xFF	; 255
 222:	08 95       	ret

00000224 <__umulhisi3>:
 224:	a2 9f       	mul	r26, r18
 226:	b0 01       	movw	r22, r0
 228:	b3 9f       	mul	r27, r19
 22a:	c0 01       	movw	r24, r0
 22c:	a3 9f       	mul	r26, r19
 22e:	70 0d       	add	r23, r0
 230:	81 1d       	adc	r24, r1
 232:	11 24       	eor	r1, r1
 234:	91 1d       	adc	r25, r1
 236:	b2 9f       	mul	r27, r18
 238:	70 0d       	add	r23, r0
 23a:	81 1d       	adc	r24, r1
 23c:	11 24       	eor	r1, r1
 23e:	91 1d       	adc	r25, r1
 240:	08 95       	ret

00000242 <__udivmodsi4>:
 242:	a1 e2       	ldi	r26, 0x21	; 33
 244:	1a 2e       	mov	r1, r26
 246:	aa 1b       	sub	r26, r26
 248:	bb 1b       	sub	r27, r27
 24a:	fd 01       	movw	r30, r26
 24c:	0d c0       	rjmp	.+26     	; 0x268 <__udivmodsi4_ep>

0000024e <__udivmodsi4_loop>:
 24e:	aa 1f       	adc	r26, r26
 250:	bb 1f       	adc	r27, r27
 252:	ee 1f       	adc	r30, r30
 254:	ff 1f       	adc	r31, r31
 256:	a2 17       	cp	r26, r18
 258:	b3 07       	cpc	r27, r19
 25a:	e4 07       	cpc	r30, r20
 25c:	f5 07       	cpc	r31, r21
 25e:	20 f0       	brcs	.+8      	; 0x268 <__udivmodsi4_ep>
 260:	a2 1b       	sub	r26, r18
 262:	b3 0b       	sbc	r27, r19
 264:	e4 0b       	sbc	r30, r20
 266:	f5 0b       	sbc	r31, r21

00000268 <__udivmodsi4_ep>:
 268:	66 1f       	adc	r22, r22
 26a:	77 1f       	adc	r23, r23
 26c:	88 1f       	adc	r24, r24
 26e:	99 1f       	adc	r25, r25
 270:	1a 94       	dec	r1
 272:	69 f7       	brne	.-38     	; 0x24e <__udivmodsi4_loop>
 274:	60 95       	com	r22
 276:	70 95       	com	r23
 278:	80 95       	com	r24
 27a:	90 95       	com	r25
 27c:	9b 01       	movw	r18, r22
 27e:	ac 01       	movw	r20, r24
 280:	bd 01       	movw	r22, r26
 282:	cf 01       	movw	r24, r30
 284:	08 95       	ret

00000286 <_exit>:
 286:	f8 94       	cli

00000288 <__stop_program>:
 288:	ff cf       	rjmp	.-2      	; 0x288 <__stop_program>
